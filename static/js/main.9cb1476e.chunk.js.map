{"version":3,"sources":["components/TopNavbar.js","App.js","serviceWorker.js","index.js"],"names":["TopNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","color","dark","expand","NavbarBrand","to","tag","RRNavLink","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","React","Component","App","react_router_dom","basename","TopNavbar_TopNavbar","react_router","path","exact","component","_ref","match","params","name","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cb1476e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem\r\n} from 'reactstrap';\r\nimport { NavLink as RRNavLink } from 'react-router-dom';\r\n\r\nexport default class TopNavbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n            isOpen: false\r\n        };\r\n    }\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"md\">\r\n                    <NavbarBrand to=\"/\" tag={RRNavLink}>Single Page Aplication</NavbarBrand>\r\n                    <NavbarToggler onClick={this.toggle} />\r\n                    <Collapse isOpen={this.state.isOpen} navbar>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink to=\"/\" tag={RRNavLink}>Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/users\" tag={RRNavLink}>User</NavLink>\r\n                            </NavItem>\r\n                            <UncontrolledDropdown nav inNavbar>\r\n                                <DropdownToggle nav caret>\r\n                                    Options\r\n                                </DropdownToggle>\r\n                                <DropdownMenu right>\r\n                                    <DropdownItem>\r\n                                        Option 1\r\n                                    </DropdownItem>\r\n                                    <DropdownItem>\r\n                                        Option 2\r\n                                    </DropdownItem>\r\n                                    <DropdownItem divider />\r\n                                    <DropdownItem>\r\n                                        Reset\r\n                                    </DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter, Route, Link, Switch } from 'react-router-dom';\nimport TopNavbar from './components/TopNavbar';\n\nfunction App() {\n\n\tfunction Home() {\n\t\treturn <h2>Halaman Home</h2>\n\t}\n\n\tfunction ListView() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>Semua User</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><Link to='user/kurob' >kurob</Link></li>\n\t\t\t\t\t<li><Link to='user/robert' >robert</Link></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t) \n\t}\n\n\tfunction DetailView({ match }) {\n\t\treturn <h2>Ini Halaman {match.params.name}</h2>\n\t}\n\n\tfunction NoMatch() {\n\t\treturn <h2>404, Halaman Tidak ditemukan</h2>\n\t}\n\n\treturn (\n\t\t<BrowserRouter basename='/spa'>\n\t\t\t<div>\n\t\t\t\t\n\t\t\t\t<nav>\n\t\t\t\t\t<TopNavbar />\n\t\t\t\t</nav>\n\n\t\t\t\t<main>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path='/' exact component={Home} />\n\t\t\t\t\t\t<Route path='/users' exact component={ListView} />\n\t\t\t\t\t\t<Route path='/user/:name' exact component={DetailView} />\n\t\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</main>\n\t\t\t</div>\n\t\t</BrowserRouter>\n\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}